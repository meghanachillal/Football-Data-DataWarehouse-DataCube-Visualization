<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20181.18.0706.1237                               -->
<workbook original-version='18.1' source-build='2018.1.3 (20181.18.0706.1237)' source-platform='win' version='18.1' xml:base='https://us-east-1.online.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SortTagCleanup />
  </document-format-change-manifest>
  <repository-location id='GroupProject' path='/t/meghanachillalatsmuca/workbooks' revision='1.2' site='meghanachillalatsmuca' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
        <calculation class='tableau' formula='3.0' />
        <aliases>
          <alias key='1.0' value='BestAwayTeamOfEra' />
          <alias key='2.0' value='TrendOfFootBall' />
          <alias key='3.0' value='ActiveFriendlyTeam' />
          <alias key='4.0' value='CountryWithMostTournaments' />
          <alias key='5.0' value='TournamentWithMostGoals' />
          <alias key='6.0' value='BestHomeTeam' />
        </aliases>
        <members>
          <member alias='BestAwayTeamOfEra' value='1.0' />
          <member alias='TrendOfFootBall' value='2.0' />
          <member alias='ActiveFriendlyTeam' value='3.0' />
          <member alias='CountryWithMostTournaments' value='4.0' />
          <member alias='TournamentWithMostGoals' value='5.0' />
          <member alias='BestHomeTeam' value='6.0' />
        </members>
      </column>
    </datasource>
    <datasource caption='FactFootballTeamScore+ (international_footballResults)' inline='true' name='federated.0jgmsdh0syxov917hpl9r05wv53q' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='LAPTOP-IR7CRMI5' name='sqlserver.13i8j310insicf18iujjf0nhvky6'>
            <connection authentication='sspi' class='sqlserver' dbname='international_footballResults' odbc-native-protocol='yes' one-time-sql='' server='LAPTOP-IR7CRMI5' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[FactFootballTeamScore].[football_tournament_id]' />
              <expression op='[football_tournament].[football_tournament_id]' />
            </expression>
          </clause>
          <relation join='inner' type='join'>
            <clause type='join'>
              <expression op='='>
                <expression op='[FactFootballTeamScore].[football_location_id]' />
                <expression op='[football_location].[football_location_id]' />
              </expression>
            </clause>
            <relation join='inner' type='join'>
              <clause type='join'>
                <expression op='='>
                  <expression op='[FactFootballTeamScore].[home_team_id]' />
                  <expression op='[football_hometeam].[football_hometeam_id]' />
                </expression>
              </clause>
              <relation join='inner' type='join'>
                <clause type='join'>
                  <expression op='='>
                    <expression op='[FactFootballTeamScore].[away_team_id]' />
                    <expression op='[football_awayteam].[football_awayteam_id]' />
                  </expression>
                </clause>
                <relation join='inner' type='join'>
                  <clause type='join'>
                    <expression op='='>
                      <expression op='[FactFootballTeamScore].[date_id]' />
                      <expression op='[dates].[date_id]' />
                    </expression>
                  </clause>
                  <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='FactFootballTeamScore' table='[dbo].[FactFootballTeamScore]' type='table' />
                  <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='dates' table='[dbo].[dates]' type='table' />
                </relation>
                <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='football_awayteam' table='[dbo].[football_awayteam]' type='table' />
              </relation>
              <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='football_hometeam' table='[dbo].[football_hometeam]' type='table' />
            </relation>
            <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='football_location' table='[dbo].[football_location]' type='table' />
          </relation>
          <relation connection='sqlserver.13i8j310insicf18iujjf0nhvky6' name='football_tournament' table='[dbo].[football_tournament]' type='table' />
        </relation>
        <cols>
          <map key='[away_team_id]' value='[FactFootballTeamScore].[away_team_id]' />
          <map key='[awayteam_score]' value='[FactFootballTeamScore].[awayteam_score]' />
          <map key='[date]' value='[dates].[date]' />
          <map key='[date_id (dates)]' value='[dates].[date_id]' />
          <map key='[date_id]' value='[FactFootballTeamScore].[date_id]' />
          <map key='[day]' value='[dates].[day]' />
          <map key='[football_awayteam_id]' value='[football_awayteam].[football_awayteam_id]' />
          <map key='[football_awayteam_name]' value='[football_awayteam].[football_awayteam_name]' />
          <map key='[football_hometeam_id]' value='[football_hometeam].[football_hometeam_id]' />
          <map key='[football_hometeam_name]' value='[football_hometeam].[football_hometeam_name]' />
          <map key='[football_location]' value='[football_location].[football_location]' />
          <map key='[football_location_city]' value='[football_location].[football_location_city]' />
          <map key='[football_location_country]' value='[football_location].[football_location_country]' />
          <map key='[football_location_id (football_location)]' value='[football_location].[football_location_id]' />
          <map key='[football_location_id]' value='[FactFootballTeamScore].[football_location_id]' />
          <map key='[football_tournament]' value='[football_tournament].[football_tournament]' />
          <map key='[football_tournament_id (football_tournament)]' value='[football_tournament].[football_tournament_id]' />
          <map key='[football_tournament_id]' value='[FactFootballTeamScore].[football_tournament_id]' />
          <map key='[home_team_id]' value='[FactFootballTeamScore].[home_team_id]' />
          <map key='[hometeam_score]' value='[FactFootballTeamScore].[hometeam_score]' />
          <map key='[id]' value='[FactFootballTeamScore].[id]' />
          <map key='[month]' value='[dates].[month]' />
          <map key='[year]' value='[dates].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_location_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_location_id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>football_location_id</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[date_id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>date_id</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>home_team_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[home_team_id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>home_team_id</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>away_team_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[away_team_id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>away_team_id</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>hometeam_score</remote-name>
            <remote-type>3</remote-type>
            <local-name>[hometeam_score]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>hometeam_score</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>awayteam_score</remote-name>
            <remote-type>3</remote-type>
            <local-name>[awayteam_score]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>awayteam_score</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_tournament_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_tournament_id]</local-name>
            <parent-name>[FactFootballTeamScore]</parent-name>
            <remote-alias>football_tournament_id</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[date_id (dates)]</local-name>
            <parent-name>[dates]</parent-name>
            <remote-alias>date_id</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>129</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[dates]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>month</remote-name>
            <remote-type>129</remote-type>
            <local-name>[month]</local-name>
            <parent-name>[dates]</parent-name>
            <remote-alias>month</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>day</remote-name>
            <remote-type>129</remote-type>
            <local-name>[day]</local-name>
            <parent-name>[dates]</parent-name>
            <remote-alias>day</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>129</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[dates]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_awayteam_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_awayteam_id]</local-name>
            <parent-name>[football_awayteam]</parent-name>
            <remote-alias>football_awayteam_id</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_awayteam_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_awayteam_name]</local-name>
            <parent-name>[football_awayteam]</parent-name>
            <remote-alias>football_awayteam_name</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_hometeam_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_hometeam_id]</local-name>
            <parent-name>[football_hometeam]</parent-name>
            <remote-alias>football_hometeam_id</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_hometeam_name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_hometeam_name]</local-name>
            <parent-name>[football_hometeam]</parent-name>
            <remote-alias>football_hometeam_name</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_location_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_location_id (football_location)]</local-name>
            <parent-name>[football_location]</parent-name>
            <remote-alias>football_location_id</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_location_city</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_location_city]</local-name>
            <parent-name>[football_location]</parent-name>
            <remote-alias>football_location_city</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_location_country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_location_country]</local-name>
            <parent-name>[football_location]</parent-name>
            <remote-alias>football_location_country</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_location]</local-name>
            <parent-name>[football_location]</parent-name>
            <remote-alias>football_location</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_tournament_id</remote-name>
            <remote-type>3</remote-type>
            <local-name>[football_tournament_id (football_tournament)]</local-name>
            <parent-name>[football_tournament]</parent-name>
            <remote-alias>football_tournament_id</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <precision>10</precision>
            <contains-null>false</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_INTEGER&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_SLONG&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>football_tournament</remote-name>
            <remote-type>129</remote-type>
            <local-name>[football_tournament]</local-name>
            <parent-name>[football_tournament]</parent-name>
            <remote-alias>football_tournament</remote-alias>
            <ordinal>28</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <width>255</width>
            <contains-null>true</contains-null>
            <padded-semantics>true</padded-semantics>
            <collation flag='2147483649' name='LEN_RUS_S2_VWIN' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;SQL_VARCHAR&quot;</attribute>
              <attribute datatype='string' name='DebugWireType'>&quot;SQL_C_CHAR&quot;</attribute>
              <attribute datatype='string' name='TypeIsVarchar'>&quot;true&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
      </column>
      <column caption='TournamentCount' datatype='integer' name='[Calculation_406449894168592387]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([football_tournament])' />
      </column>
      <column caption='Calculation1' datatype='string' name='[Calculation_406449894335975431]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [hometeam_score] = {MAX([hometeam_score])} THEN [year] END' />
      </column>
      <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' caption='Away Team Id' datatype='integer' hidden='true' name='[away_team_id]' role='dimension' type='ordinal' />
      <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
      <column caption='Date' datatype='string' name='[date]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='Date Id (Dates)' datatype='integer' hidden='true' name='[date_id (dates)]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Date Id' datatype='integer' hidden='true' name='[date_id]' role='dimension' type='ordinal' />
      <column caption='Day' datatype='string' name='[day]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='Football Awayteam Id' datatype='integer' hidden='true' name='[football_awayteam_id]' role='dimension' type='ordinal' />
      <column caption='Football Awayteam Name' datatype='string' name='[football_awayteam_name]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='Football Hometeam Id' datatype='integer' hidden='true' name='[football_hometeam_id]' role='dimension' type='ordinal' />
      <column caption='Football Hometeam Name' datatype='string' name='[football_hometeam_name]' role='dimension' type='nominal' />
      <column caption='Football Location' datatype='string' name='[football_location]' role='dimension' type='nominal' />
      <column caption='Football Location City' datatype='string' hidden='true' name='[football_location_city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Football Location Country' datatype='string' name='[football_location_country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Brazzaville)&quot;' />
          <semantic-value key='&quot;Serbia and Montenegro&quot;' value='&quot;Serbia&quot;' />
        </semantic-values>
      </column>
      <column aggregation='Sum' caption='Football Location Id (Football Location)' datatype='integer' hidden='true' name='[football_location_id (football_location)]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Football Location Id' datatype='integer' hidden='true' name='[football_location_id]' role='dimension' type='ordinal' />
      <column caption='Football Tournament' datatype='string' name='[football_tournament]' role='dimension' type='nominal' />
      <column aggregation='Sum' caption='Football Tournament Id (Football Tournament)' datatype='integer' hidden='true' name='[football_tournament_id (football_tournament)]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Football Tournament Id' datatype='integer' hidden='true' name='[football_tournament_id]' role='dimension' type='ordinal' />
      <column aggregation='Sum' caption='Home Team Id' datatype='integer' hidden='true' name='[home_team_id]' role='dimension' type='ordinal' />
      <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column caption='Month' datatype='string' name='[month]' role='dimension' type='nominal' />
      <column caption='Year' datatype='string' name='[year]' role='dimension' type='nominal' />
      <column-instance column='[BestHomeTeam]' derivation='InOut' name='[io:BestHomeTeam:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='BestHomeTeam_Out' />
          <alias key='true' value='BestHome_In' />
        </aliases>
      </column-instance>
      <column-instance column='[BestTeam]' derivation='InOut' name='[io:BestTeam:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='BestTeamOut' />
          <alias key='true' value='BestTeam' />
        </aliases>
      </column-instance>
      <column-instance column='[MaxHomeTeam]' derivation='InOut' name='[io:MaxHomeTeam:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='MaxHomeTeam_Out' />
          <alias key='true' value='MaxHomeTeam_In' />
        </aliases>
      </column-instance>
      <column-instance column='[MaximumGoals]' derivation='InOut' name='[io:MaximumGoals:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='Rest' />
          <alias key='true' value='MaxScore' />
        </aliases>
      </column-instance>
      <column-instance column='[MostTournaments]' derivation='InOut' name='[io:MostTournaments:nk]' pivot='key' type='nominal'>
        <aliases>
          <alias key='false' value='rest' />
          <alias key='true' value='MaxTournaments' />
        </aliases>
      </column-instance>
      <column-instance column='[football_awayteam_name]' derivation='None' name='[none:football_awayteam_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[football_hometeam_name]' derivation='None' name='[none:football_hometeam_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[awayteam_score]' derivation='Sum' name='[sum:awayteam_score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[hometeam_score]' derivation='Sum' name='[sum:hometeam_score:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
      <group name='[BestHomeTeam]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Brazil&quot;' />
          <groupfilter function='member' level='[io:MaxHomeTeam:nk]' member='true' />
        </groupfilter>
      </group>
      <group name='[BestTeam]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Uruguay&quot;' />
      </group>
      <group hidden='true' name='[Exclusions (Football Awayteam Name,IN/OUT(MaximumGoals))]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:football_awayteam_name:nk]' />
          <groupfilter function='level-members' level='[io:MaximumGoals:nk]' />
        </groupfilter>
      </group>
      <group name='[MaxHomeTeam]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Argentina&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Austria&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Belgium&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Brazil&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Chile&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;France&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Germany&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Hungary&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Norway&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Spain&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Sweden&quot;' />
          <groupfilter function='member' level='[football_hometeam_name]' member='&quot;Switzerland&quot;' />
        </groupfilter>
      </group>
      <group name='[MaximumGoals]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Argentina&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Austria&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Belgium&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Denmark&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;England&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Finland&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Hungary&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Netherlands&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Norway&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Paraguay&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Poland&quot;' />
          <groupfilter function='member' level='[football_awayteam_name]' member='&quot;Uruguay&quot;' />
        </groupfilter>
      </group>
      <group name='[MostTournaments]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='member' level='[football_location_country]' member='&quot;France&quot;' />
      </group>
      <drill-paths>
        <drill-path name='football_location_country, football_location_city'>
          <field>[football_location_country]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.286927' group-percentage='0.149406' measure-ordering='alphabetic' measure-percentage='0.50764' parameter-percentage='0.0560272' show-aliased-fields='true' show-structure='true' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:football_awayteam_name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;East Timor&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;CuraÃ§ao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Wallis Islands and Futuna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Korea DPR&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vietnam Republic&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bonaire&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tahiti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Zanzibar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;St. Martin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yugoslavia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia-Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vatican&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Guyana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Western Australia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SÃ£o TomÃ© and PrÃ­ncipe&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;German DR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Micronesia FS&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;St. Pierre &amp; Miquelon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scotland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Korea Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;RÃ©union&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tibet&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Virgin Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo DR&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Czechoslovakia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Northern Ireland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saarland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yemen DPR&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Manchukuo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0jgmsdh0syxov917hpl9r05wv53q].[sum:awayteam_score:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0jgmsdh0syxov917hpl9r05wv53q].[sum:hometeam_score:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:MaximumGoals:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>true</bucket>
            </map>
            <map to='#e15759'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:football_hometeam_name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Virgin Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;East Timor&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;England&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;CuraÃ§ao&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yemen DPR&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Faroe Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Korea DPR&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Wales&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bonaire&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tahiti&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;St. Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Micronesia FS&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Northern Mariana Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;St. Martin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Turks and Caicos Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bosnia-Herzegovina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burma&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Guyana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yugoslavia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Cyprus&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;German DR&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;St. Pierre &amp; Miquelon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Scotland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Korea Republic&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wallis Islands and Futuna&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Congo DR&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vietnam Republic&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Czechoslovakia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Northern Ireland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;SÃ£o TomÃ© and PrÃ­ncipe&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Lucia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zanzibar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;RÃ©union&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:MaxHomeTeam:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>true</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:MostTournaments:nk]' type='palette'>
            <map to='#55007f'>
              <bucket>true</bucket>
            </map>
            <map to='#ffff7f'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:BestHomeTeam:nk]' type='palette'>
            <map to='#8c2e00'>
              <bucket>true</bucket>
            </map>
            <map to='#ff5500'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:BestTeam:nk]' type='palette'>
            <map to='#55aa00'>
              <bucket>true</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>false</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Canada&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
          <calculation class='tableau' formula='3.0' />
          <aliases>
            <alias key='1.0' value='BestAwayTeamOfEra' />
            <alias key='2.0' value='TrendOfFootBall' />
            <alias key='3.0' value='ActiveFriendlyTeam' />
            <alias key='4.0' value='CountryWithMostTournaments' />
            <alias key='5.0' value='TournamentWithMostGoals' />
            <alias key='6.0' value='BestHomeTeam' />
          </aliases>
        </column>
      </datasource-dependencies>
      <filter class='categorical' column='[football_location]' filter-group='2'>
        <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
          <groupfilter function='level-members' level='[football_location]' />
          <groupfilter function='union'>
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;6th of October City,Egypt\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Å ibenik,Croatia\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã–rebro,Sweden\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã…rhus,Denmark\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã“bidos,Portugal\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã‰vian-les-Bains,France\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã‰vora,Portugal\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã‰vreux,France\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ã‰vry/Bondoufle,France\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ä°zmit,Turkey\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;â€˜Atele,Tonga\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Å½ilina,Slovakia\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;AÃ¯n Draham,Tunisia\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;ÅÃ³dÅº,Poland\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;Ãgueda,Portugal\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;ÄŒeskÃ© BudÄ›jovice,Czech Republic\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;ÅŒita,Japan\&quot;&quot;' />
            <groupfilter function='member' level='[football_location]' member='&quot;\&quot;ÃšstÃ­ nad Labem,Czech Republic\&quot;&quot;' />
          </groupfilter>
        </groupfilter>
      </filter>
      <filter class='categorical' column='[football_location_country]' filter-group='2'>
        <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
          <groupfilter function='level-members' level='[football_location_country]' />
          <groupfilter function='member' level='[football_location_country]' member='&quot;TBD&quot;' />
        </groupfilter>
      </filter>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='ActiveFriendlyTeams'>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
            <column caption='Football Awayteam Name' datatype='string' name='[football_awayteam_name]' role='dimension' type='nominal' />
            <column caption='Football Tournament' datatype='string' name='[football_tournament]' role='dimension' type='nominal' />
            <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
            <column-instance column='[football_awayteam_name]' derivation='None' name='[none:football_awayteam_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[football_tournament]' derivation='None' name='[none:football_tournament:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>3.0</min>
            <max>3.0</max>
          </filter>
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='shape' value='circle' />
                <format attr='mark-color' value='#3612aa' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</rows>
        <cols>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_awayteam_name:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='BestAwayTeamofEra'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Best Team of All Era&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
            <column caption='Football Awayteam Name' datatype='string' name='[football_awayteam_name]' role='dimension' type='nominal' />
            <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
            <column-instance column='[BestTeam]' derivation='InOut' name='[io:BestTeam:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='BestTeamOut' />
                <alias key='true' value='BestTeam' />
              </aliases>
            </column-instance>
            <column-instance column='[MaximumGoals]' derivation='InOut' name='[io:MaximumGoals:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='Rest' />
                <alias key='true' value='MaxScore' />
              </aliases>
            </column-instance>
            <column-instance column='[football_awayteam_name]' derivation='None' name='[none:football_awayteam_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.0</max>
          </filter>
          <filter class='categorical' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaximumGoals:nk]'>
            <groupfilter function='member' level='[io:MaximumGoals:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <alphabetic-sort column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_awayteam_name:nk]' direction='ASC' />
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaximumGoals:nk]</column>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' num-steps='18' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_awayteam_name:nk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
              <color column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:BestTeam:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='BestHomeTeam'>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
            <column caption='Football Hometeam Name' datatype='string' name='[football_hometeam_name]' role='dimension' type='nominal' />
            <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
            <column-instance column='[BestHomeTeam]' derivation='InOut' name='[io:BestHomeTeam:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='BestHomeTeam_Out' />
                <alias key='true' value='BestHome_In' />
              </aliases>
            </column-instance>
            <column-instance column='[MaxHomeTeam]' derivation='InOut' name='[io:MaxHomeTeam:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='MaxHomeTeam_Out' />
                <alias key='true' value='MaxHomeTeam_In' />
              </aliases>
            </column-instance>
            <column-instance column='[football_hometeam_name]' derivation='None' name='[none:football_hometeam_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[MaxHomeTeam]' />
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>6.0</min>
            <max>6.0</max>
          </filter>
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[MaxHomeTeam]</column>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk]' value='94' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:BestHomeTeam:nk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.4612706899642944' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</rows>
        <cols>([federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaxHomeTeam:nk] / [federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='CountryWithMostTournaments'>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='TournamentCount' datatype='integer' name='[Calculation_406449894168592387]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT([football_tournament])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Football Location Country' datatype='string' name='[football_location_country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Congo&quot;' value='&quot;Congo (Brazzaville)&quot;' />
                <semantic-value key='&quot;Serbia and Montenegro&quot;' value='&quot;Serbia&quot;' />
              </semantic-values>
            </column>
            <column caption='Football Tournament' datatype='string' name='[football_tournament]' role='dimension' type='nominal' />
            <column-instance column='[MostTournaments]' derivation='InOut' name='[io:MostTournaments:nk]' pivot='key' type='nominal'>
              <aliases>
                <alias key='false' value='rest' />
                <alias key='true' value='MaxTournaments' />
              </aliases>
            </column-instance>
            <column-instance column='[football_location_country]' derivation='None' name='[none:football_location_country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894168592387]' derivation='User' name='[usr:Calculation_406449894168592387:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>4.0</min>
            <max>4.0</max>
          </filter>
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[Longitude (generated)]' field-type='quantitative' max='16744657.263657752' min='-16468538.062608043' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[Latitude (generated)]' field-type='quantitative' max='13082047.908686971' min='-5062927.6432251194' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894168592387:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MostTournaments:nk]' />
              <size column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894168592387:qk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894168592387:qk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_location_country:nk]' />
              <lod column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_location_country:nk]' />
              <geometry column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jgmsdh0syxov917hpl9r05wv53q].[Latitude (generated)]</rows>
        <cols>[federated.0jgmsdh0syxov917hpl9r05wv53q].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='TournamentWithMostGoals'>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
            <column caption='Football Tournament' datatype='string' name='[football_tournament]' role='dimension' type='nominal' />
            <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
            <column-instance column='[football_tournament]' derivation='None' name='[none:football_tournament:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>5.0</min>
            <max>5.0</max>
          </filter>
          <computed-sort column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]' direction='ASC' using='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' num-steps='3' palette='purple_10_0' type='interpolated' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
              <text column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</rows>
        <cols>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='TrendOfFootBall'>
      <table>
        <view>
          <datasources>
            <datasource caption='FactFootballTeamScore+ (international_footballResults)' name='federated.0jgmsdh0syxov917hpl9r05wv53q' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column alias='ActiveFriendlyTeam' caption='Select a Sheet' datatype='real' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='3.0'>
              <calculation class='tableau' formula='3.0' />
              <aliases>
                <alias key='1.0' value='BestAwayTeamOfEra' />
                <alias key='2.0' value='TrendOfFootBall' />
                <alias key='3.0' value='ActiveFriendlyTeam' />
                <alias key='4.0' value='CountryWithMostTournaments' />
                <alias key='5.0' value='TournamentWithMostGoals' />
                <alias key='6.0' value='BestHomeTeam' />
              </aliases>
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0jgmsdh0syxov917hpl9r05wv53q'>
            <column caption='Score' datatype='integer' name='[Calculation_406449894152540161]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([awayteam_score]) + SUM([hometeam_score])' />
            </column>
            <column caption='Select a Sheet' datatype='real' name='[Calculation_406449894348480520]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Parameters].[Parameter 1]' />
            </column>
            <column-instance column='[Calculation_406449894348480520]' derivation='Attribute' name='[attr:Calculation_406449894348480520:qk]' pivot='key' type='quantitative' />
            <column caption='Awayteam Score' datatype='integer' name='[awayteam_score]' role='measure' type='quantitative' />
            <column caption='Hometeam Score' datatype='integer' name='[hometeam_score]' role='measure' type='quantitative' />
            <column-instance column='[year]' derivation='None' name='[none:year:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_406449894152540161]' derivation='User' name='[usr:Calculation_406449894152540161:qk]' pivot='key' type='quantitative' />
            <column caption='Year' datatype='string' name='[year]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]' included-values='in-range'>
            <min>2.0</min>
            <max>2.0</max>
          </filter>
          <slices>
            <column>[federated.0jgmsdh0syxov917hpl9r05wv53q].[attr:Calculation_406449894348480520:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-markers-mode' value='all' />
                <format attr='mark-color' value='#e15759' />
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</rows>
        <cols>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:year:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='FootBallDashboard'>
      <style />
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98076' id='5' param='horz' type='layout-flow' w='99002' x='499' y='962'>
            <zone h='98076' id='1' param='vert' type='layout-flow' w='80860' x='499' y='962'>
              <zone h='3606' id='3' name='BestAwayTeamofEra' show-title='false' w='80860' x='499' y='962'>
                <layout-cache cell-count-h='1' cell-count-w='1' type-h='cell' type-w='cell' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='120' id='11' name='BestHomeTeam' show-title='false' w='80860' x='499' y='4568'>
                <layout-cache fixed-size-w='1' has-max-size-h='true' maxheight='1' minheight='1' type-h='scalable' type-w='fixed' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='120' id='7' name='TrendOfFootBall' show-title='false' w='80860' x='499' y='4688'>
                <layout-cache has-max-size-h='true' maxheight='1' minheight='1' type-h='scalable' type-w='cell' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='93990' id='8' name='ActiveFriendlyTeams' show-title='false' w='80860' x='499' y='4808'>
                <layout-cache cell-count-w='240' minheight='280' non-cell-size-w='89' type-h='scalable' type-w='cell' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='120' id='9' name='CountryWithMostTournaments' show-title='false' w='80860' x='499' y='98798'>
                <layout-cache has-max-size-h='true' has-max-size-w='true' maxheight='1' maxwidth='1' minheight='1' minwidth='1' type-h='scalable' type-w='scalable' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='120' id='10' name='TournamentWithMostGoals' show-title='false' w='80860' x='499' y='98918'>
                <layout-cache has-max-size-h='true' maxheight='1' minheight='1' type-h='scalable' type-w='cell' />
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='291' h='98076' id='4' is-fixed='true' param='vert' type='layout-flow' w='18142' x='81359' y='962'>
              <zone h='24279' id='6' mode='list' param='[Parameters].[Parameter 1]' type='paramctrl' w='18142' x='81359' y='962'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='BestAwayTeamofEra'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[:Measure Names]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:BestTeam:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaximumGoals:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:year:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[sum:hometeam_score:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='TrendOfFootBall'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:year:nk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:year:nk]</field>
                  <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;2017&quot;</value>
                <value>1891</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_awayteam_name:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:year:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='ActiveFriendlyTeams'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[:Measure Names]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_awayteam_name:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='CountryWithMostTournaments'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MostTournaments:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_location_country:nk]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='TournamentWithMostGoals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_tournament:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='BestHomeTeam'>
      <cards>
        <edge name='left'>
          <strip size='100'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='126'>
            <card mode='list' param='[Parameters].[Parameter 1]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <tuple-selection>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields>
                    <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaxHomeTeam:nk]</field>
                    <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk]</field>
                  </x-fields>
                  <y-fields>
                    <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:MaxHomeTeam:nk]</field>
                  <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[none:football_hometeam_name:nk]</field>
                  <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[usr:Calculation_406449894152540161:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>true</value>
                <value>&quot;Brazil&quot;</value>
                <value>1722</value>
              </tuple>
            </tuple-reference>
          </tuple-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[MaxHomeTeam]</field>
            <field>[federated.0jgmsdh0syxov917hpl9r05wv53q].[io:BestHomeTeam:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' maximized='true' name='FootBallDashboard'>
      <viewpoints>
        <viewpoint name='ActiveFriendlyTeams'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='BestAwayTeamofEra'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='BestHomeTeam' />
        <viewpoint name='CountryWithMostTournaments'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='TournamentWithMostGoals'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='TrendOfFootBall'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='ActiveFriendlyTeams' width='192'>
      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
      QmCC
    </thumbnail>
    <thumbnail height='192' name='BestAwayTeamofEra' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO29d5Rc93Xn+Xmpck5dnRtAIwMEQAAEBTGJQTQVHBQsy5ZW2uCVz449s8mz
      Z9dzxnsm7PGes2cn7PHa6zD2GUsjWbI9kk2KkihGkAQJAiAy0EADjc6pck7vvf2jgEY30Y2u
      8LqrAdbnr+6qF25Vvfve73d/996voOu6Tps2H1PEVhvQpk0rkVttQJv7H13X0coqyekYiekY
      2UiKbCxNKVekUqwgiAKyScZkM2PzOrAHXHi6fLg7fYiyhCAILbO97QBtGqaYLTB9aYyZy+NE
      b85RKZbr2l8yyQQ2ddC5q4/wzl7MdssaWboyQnsO0KYedF0nPZfk+juXmL40RjlfMuS4kkmm
      c1cfg4/vxtXhWbenQtsB2tSEruvkYhmGXj/L5LmbaKq2JucRRJGuPf3seHYfdp9zzR2h7QBt
      VkVTVa6/e4Wh186ilirrck5Rltj65B62PrEHSZbW7DxtB2hzT7KxNGf+83EiN2Zacn7/QAcH
      vngUu8+5JsdvO8AGQtd10EGn+pMIgtCyCImu68THI3zw3TcppHItseE2ZqeVQ7/6OIHNYcOP
      3XaAFlIulIiPR0hMRclEUuTjGUr5Emq5AtwJHdr9TpxBN65OL57uALJp7YN3M1cmOPm9t27Z
      0npEWeThLz1G994BQ4/bdoB1ppgtMHt1kslzN4mNzlIp1neBKVYToa1ddO0ZIDjYiWJWDLVP
      13VmhyY31MV/G1ESefjLxjpB2wHWAV3XKaRyDL99ifEPrxsWOrS67Wx6dDsDh7ehWE2GHDM+
      EeHdP/8ZlXWa7NaLbJJ59BvP4B/oMOR4bQdYYyqlCtfeusCNdy/VfbevFbPDwvan9zFweCuC
      2Hh2Sz6V49gfv0w+mTXQOuOxuGw88VsvYHXbmz5W2wHWCF3XiY/Nc+aHx0nPJdflnL7+EAe+
      cBRHwFX3vpqqceI7rzM7NLkGlhlPYHOYT3zjGcQmQ6RtB1gDdE3n+vHLXHnlQ9Syuq7nViwm
      9n/hKJ27emuOIOm6ztipYc785+NrbJ2x7PnsYbYc3dnUMdrZoAajqRrnXzrBxR+fXPeLH6qR
      pZPfe5Mb716ueZ9SrsjFl0+toVVrw9BrZ5serrUdwEDUisqZv3uXkfeGWmqHrulcePkkV149
      u/q2us7Q6+coF4yZmK8n5Xypps94L9oOYBC6rnPpJ6cYP3Oj1aZU0WHo9bPcOH6Ze41y88ks
      46evr6NhxjJxdoRMNNXw/m0HMIibJ65y4/iVVpuxFB0u/PjUPdMYRk8O153GvJHQKio337/a
      0L65RKbtAEaQnI5x8eWTrTZjWXRN4/QP3l42naFSqjB2argFVhnL+IfX61q3KKTznH/pA179
      Nz9qO0CzqOUKZ3/0XksmvLVSSOe58PLJu4ZC0ZGZluf5GEEpVyRyfXrV7XRNZ+LcCG/84Yvc
      ePcyWkVtO0CzjJ4aJj4eabUZqzJ5fpT5j1wkM1cmWmSN8UxdGrvn+2q5wrl/eJ9Tf32MYjq/
      8HrbAZqglCty9fXzrTajNnSdiy+fWlLIMndtqoUGGUvk+jRqZfmncDFb4L3/+Bo3T9w9V2g7
      QBOMnRqmmMmvvuEGITUTZ3aoetcvZgvk4pkWW2QchXR+yZ194fVMnvf+46srBgLaDtAgWkVl
      5ERr4/2NMPL+ELquk5iMGnA0EXugmo/j7PAYcLzG0TWd5HRsyWtqWeXUXx8jMbHyZ213hWiQ
      yMgsudj9dweN3JghE0mRjTQeO7+DhM1jJRvJYvc7EWWJ5GQUX38QShpmv4Po1Qm8W7qQzBJz
      5yfwbgoh6hVyWRW734FaLBG/MY2rJ0RsbK4pa9LzSTpv/a3rOudfPLFqJVvbARpk6uJoq01o
      CF3Tmb40RilbMOR49pAPUDBbZNRSNSXbZLOQmp4mXRLx9gUozMyB34esyIiigMPrpizkSdyY
      pCxa8PYGEA0oayik7gyBJs/fZPTUtVX3aQ+BGkCtqMwPrx5226jMD09TLhix+KWTmY0yPzxN
      MVdBQyI02IliEm6VdkI5lcXV14kn7EaxW5ElAU3XoFKmVFRRsxls3WHSE81H0m47dSGd5+KP
      T0INaZ7tJ0AD5BNZcom1G/7IZmXV1VnZLDdcX5CYjDadRlylQuR6dXw9c2X87rej88RFCcxZ
      bAJko3HS0fiSTSSLmUoiQb7QfJuV2xVsV984R2GZCfFytJ8ADZCcjtV0d7kX4T2bCA52YnWY
      sXntiLKE2WlDFAU8vQEEQcDitiPJIqIsYXJYkWQRBAGL24m/39/wuSul8vpFgDSV1Gyc6fNj
      LHeJq6UyM1eMq0HIxtOMnqx9dbv9BGiAbDTd9DFuV27pGjj8DlzdIXLzSdwhOxogKgpmuxlf
      l4cSMmo8ianLQ0UTKadyiGIT3SJ01nUF+J69hDRtWcdoBNmsMPLeENoK6wHL7mPQuT9W5BPN
      lwxWcrlb8wgBJ1ApFEjNJjA7gwDYAh7MFpAtCoV0keRMAr/DiiToROeSmF2Bps6/FgXvjg4/
      Tq+Z6SvVBTZnVwCrw0w5nQGLDUWRKMTiyG4PZqtMfHiCQsG4FBJBFJj4sL5s3PYQqAGKueYj
      KPlkbtHfeQrJHKCTT+bIJ3MUM3kEWaaQzFJI5tBv7ZOO5wkNhqk0WVi/Ft3WsnMxKpU7Y8PM
      XIJiroRskjDbTORTecwuJyZFZfrSDJ4mhnHLkYmmKdYZ3Wo/ARrAiL6YmfnbdcI6mfnUotfv
      DK9mU+ll98lHlk4kG8Hmc5Kaaf44i1mu7kAtVxAtZkBHV1UEwVwd960BjaxttB2gAVrZz94o
      XGGv4Q7g6g5h8zpx+tOomoTZZUVWREq5HJIgY/PaKaXSiDYH4Z1h4sPLRI6aoJF2M20HaACj
      O7MpFmVJXF62mKjcKlG0uO2oxSLlQgXRpCDqKpVy83dQR8CFzeswNBqUmpwjNTkHooSiQC6+
      uBtGYvGWhp3zNqIs1vBkVtj+3HaGX71IcFs3M0OT7TlAI5idVsOO5ewM0LH1Ts9L2W6jd18/
      kiTg6AphtcnIigwIBLZtJtjvNuS8ZrtlTXptAqCplIvrWx9hddtrCE0LJKeTeHu8CKKAb0t3
      2wEawchOxenpCMX8nYhMJZsjOVsd+7s73Mh2G+5OD/bOALnZSLPLDwvY/U46d/cZdLTW4+mq
      bUKtFnLoJhuSCBanpe0AjeAMGXMX/igfbW9YyBZIjc8hmMzYXVasfjfOoJtmZyCiJGL3OQls
      6jCku1qrMdktuLt9NWypkk/kid2cQy2XiQzPtOcAjeDq8NaUrlAL7p4QoiThDLix+azEZzIo
      Zhlvr5/Y9Sk8vUGSY7PkUgUQZTJ2semngMVlw+qxIwgCPfs3ce3NC01/jlbS89BAjWFdlUyk
      Gn6eHqpmibYdoAEUqwlX2EtstLn0XYDkxBy3p4rpSPWv2dSdiWns5qJ0Xq1CvvlFaIJbOhci
      Wf0Ht3Lj3csbuqb5XoiyxOajO5m72lg6RXsI1ACCINC5q7fVZjRMaFvXwt82n4O+g4MttKY5
      eg9swe5zNtwdu+0ADdK1ux+hmXycFmF12wgN3nEAQRDY9uReFIsx7dXXE8VqYtuTewAwO20N
      HaPtAA1i9dgJbe1utRl107m7H/kjohoWl40dz+5vkUWNs+2pvdi8DgBsXkdDN6S2AzSIIAhs
      eWwX3EerwqIiMfjYrmXfGziyjeBg57LvbUT8mzrYvKgztMVpxeyof32m7QBNENjUQXDLGi0m
      rQH9B7dicS0/VBBFkQO/chSru7GhxHpidlp5+IufRFwkBiLJEt6e+pPr2g7QBIIgsPO5A4jS
      xv8aTXYLW5/cc888JqvHzqFfewJJWTtd3maRTDIHv/zYwtBnMeGd9QcmNv4vt8Hx9gTY8snl
      hxUbid3PP4x1hbv/Ynx9IQ5++XFEeeNdGqIkcuALRwluWX6o1rG9B6nOPK2N9ynvQ7Y/vQ9P
      T3MFKmtJ994BevZvrnn7zt19HPzy43VfTGuJpMjs/8JRuvb0r7iNyWauOzzddgADkBSJw7/2
      REOTsLXGFfby0C8dqXuY1rWnn0e//jRmh2WNLKsdk93C4V9/kt79m+85hBMEgU1HdtR17LYD
      GITN6+DI155CsRir29sMNp+DI1/7FCaruaH9A5vDPP6tF/D1BQ22rHa8vUGe+NYLdGyrLeTs
      6wsSqnFbaIvk1Y2u6eiaBoKw7F11/vo0H3z3TcO0gBvF7ndy5GtPG5K4p1ZUho9d5NpbF+5d
      4G4gkiKx5bHdbHtqL5IsLXzvul7N/b/XkyA1m+CtP/pxTXXPbQdYAV3XKWYLxMcjJKeipGYT
      FJI5itnCggNIioTJZsHmdeAMufH1hfB0+0jPJ/ngO28sqftdT9ydPh75jacw2S1koyniExGy
      0TSFdI5yvoymaoiSgMlmweqx4wy6cXf5sHsd9+wXlImkuPTT08xcGUfX1uiyEQRCg52EtnWj
      VVSS0zFy8Uz1e1fvOIDJasbmc+IMufF2+/H1h5DNyoJjXHn1DEOvnVv9dG0HWEopV2Ty/E2m
      LowSG52ru/5XMsmEtnbhH+hYOMZ60rmrj47t3cxdnSQyMkspV6x5X4vLRmhrFz37NuEf6Fhx
      3hAfn2fkxFUmz92sqwXJaoiyhMlmplIs151pK5sVfH1B+g4OEt7RgyAIvPsXPyd6c/ae+7Ud
      gOrdPhfPMHzsIpPnRgxqG1idvEmyuC5PAlESsfkclPMlipnmu1bYvA42H91J/8HBu1InoPqd
      lfMlJs6NMHtlgvj4fN3fm2xRcAbclAsl8smsYRmpFpeNwcd307Gtm3f/4pV7trH52DtAuVjm
      +tsXuf7O5TUVi5MUCU3T0Q3oKLEYQRKrQzJoulvdcth8TnZ9+gBdu/sWmnktRylXJD2fJDkV
      JT2XJBtLU8oVb43DBWSzgtlmXhhyOTs8ZKNprr9ziYwhnaqXsd3roPfAZkbeG1rxSfixdoDY
      2Dxnfnic9Gxi9Y0NwBX24un2Mzc8dasPUOPY/U78/SHmrk83faxa6NzVy97PH6lpMW01yvkS
      Z3/0HpPnbzZvWA04Ai5yieyyw7WPpQPoms7ND65y8eVTa9Ih7V5Y3XYOfPEogiAwdXGU2Og8
      2XiayirDB8Viwhly49/UQeeuPrLRNGd/eLwudcRmsbhsHPrK4/gHOho+Rmo2wQfffXNRX6T1
      Q5Tu7hzxsXMATdUYev0cV984tyZDhlqQTTIHvvRJunb3L4ylC6kcuWSWUraAWlJBqG5ndliw
      uu2YHdaFoo9rb13gys/PrF0k5l62mxUOfPGTdNVZUK/rOvHxCB98982WKVOKsoSrw0NyOrbw
      3X2sHEDXdS6/coZrb7Ze2E6QRA595XG6dq+8tL8c1968wKVXTrfMeaEahjz4q/XZnpyO8c6f
      /6zl6yOKxcT2px9i7MPrpKbjHx8H0HWd4bcvcuknp1ttygKSSebRrz9dU38eXdcZP32dD//u
      3XWwbHUkReLof/1pfL2rrxLn4hmO/clPNowmsclm5rHffJ70XPLjkwoxd3WKK6+cabUZS1BL
      FU794O2aurMlJqOcf/HEOlhVG1UBurdWvajVcoVT3z+2YS5+qEasTv3gbULbPiaNsfKpHGd+
      eNyQprZGU0jlOP2379zTtnKxzJm/e3ddJ7y1kItnOfPD95ZtigvVp9bVNy8QG5tfZ8tWJzkV
      48rPP3zwHUDXdS78+IMNdQf6KNGRWUY/uFvE+TbX3jxPap1CtfUyOzTBxNmRZd9LzyUYfmvj
      9hy6cXzowXeA+eszTJ3f+IqOV147t2xv+0wkxY13L7fAotq5/LPTVEpLw7i6drcy/UZD17QH
      2wE0TWPotbOtNqMmStkC19++tOQ1XderGZgbvGlVPplj7NRSXa7o6Bxz94GS5gPtALGbc+ue
      jNYMoyevLVmyL6Tz67Za2iw33r2yZFFx8twI3AcBxgfaAUbeu9JqE+qilCsyee7mwv8TZ26s
      W/59s2RjaSIj1cxLXddJTsVabFFtPLAOUMwWmL++8R/BH2Xy/Ai6rqPrOtMXx1ptTl3cflpl
      Y+mqlOx9wMapejaY+etGqaGvL7GxefLJHLqqkrhPLqLbzA9Po6kas0OTG3ryu5gH1gEiN2ZW
      32gDoms6sbE50Kk7dVo0KVCpoNWRIyTIElRUkCTQ1ab064rpPJn55KpFKKuhWE33TJkQZRGt
      csdQSZEaDhQ8sA4QHWn8R3D3hjCZJVITcxSX0bEVFBNWm0guuXLhicXropxM0ciNMDoyu2wR
      ymoEt/WhZ+LMTaSx2hUEXUOTTNgdCvGpGLagDy2boawJWJ12KrkM7m2DSNkIc+Np9HIJxWHH
      YpWITcZxdwdQc1kysdrWUHRdJz4ZaU58T5DoP7qTiXcuoEkypWwRs8OKhoArYCMTrzBwoJvx
      0zdQEVAUEU2HQraEr9tLcmKecqn2L/2BnANUSpUm1NxFTGaB+eFpiiUIbOkitKUDQRTw9HcQ
      2hJGNitY7GYcHX5Cg2EkWSQw2E1wSweCAJ6+DkJbO5EabLCWmonXfxGJClo2CSYros1B19Yg
      pZKAJ2SlpMk4O4NYpBKOnhCungBaOo0jHCAXSxG9MYvstGGymPF1OimLClaLjK5pBLf2UE/P
      2eRUjGyscREDe1eA6Q+u4Qy7cXdWVV+8fQECmzoopPKUszmS0xFyqRI9+wcoZfLYfU5EUUSt
      QHh71ypnWMoD6QD5RGbF5flasPo9BAc7MdtMiFqZXEHH2eFHLGYoVeB2YZSu68gOB+6gA1Gv
      kMvpODsDiKU0ydnGq5xyyWzd6o32sBfFYsbsdmA1C8RHZ9E0Aa1URpBERFnC3RVA1DV0TaWY
      LVW7LGg6onTnCi+mc6iqhtntxqzoFHNl6tFkSk7FmspUdXis2EJurB4XCAKCJCLLIpHhKSyh
      IA6njCCIgEBqKkLplhifty9IIZ5GVes7+QM5BCqk803tX0ykiY3NoyNVJ3O6iK6qyHYLot1K
      Pp4GBFxBB5l4DkUQbm1XXV1UbBYUm5VGrShli6hKfeFPNZtleioLsgmry0Q2V0YrqRTLDlxB
      O9Ghm0Q1P0KlSC5bQgXSc0mK+TL+vhDJ6SR6pYKqVqjoAuWyiqvHTz6WqGte0Gx5Y2pijnwy
      h8XjQKto+PsCpGbiyDYLQjFHJpkDmx2bSyE9V33SpOeSqLqAy+8gNVNfysgDmQ49fXGME//p
      jYb3d3T4UEwS2fk4mgaaDug69qAbd4eHmYs3AQHJZkUWdQqZAoIooGmAqmL2uhC1CrlEtuG1
      IEEUmi94EQR8A2FErUxkNNLcsWo+Jy2tVaiXB/IJoGnNheAys8uEHwUBSZFJjs0sCFVXkhmW
      K7XORw0o9zPiItJ1YiPruxaimE2UC60teqmHB3IOsCZNXXWdxNgc6RojIk0hGCfG7Qi4lmh4
      WAMe3B2uhRO5Oz0A+DZ1ERgINi3BupL+QL0IsoTdt6gFuiDg7e/AbFMAAXdPCLun+h0pTgdW
      Z1sjbIFGe2Euh6uvE7vjjkOZnA78vdXohKs7SGhrF2ZLNdwT3N5bV8RkJWSTYoh+r2y34e3x
      I942SrHgC5jB5sThkHH2hAj0+EE0I0slIjfnm37wuLtq0etdHZvXibvDs/C/d0s3hfkY/s2d
      uPvDlBNxCtkyCCK+/k484bv1AmrhgXQAi0F3T0GUKBRUbIscQNBVJHPVwXLzcWKzGdwdbuyd
      QexuM5IBDmB2WA3p6VnJ5sgm7kzFRZuNUipNLp7D6nNjM2vksiUQVHTBRM/+zShKcx/A1xvA
      bG++o3R2PkF50eKW2SSQz5VRVR2n144tHKBrZxfuvg5S43MNz7UeSAeweuzI5uaHQbqmUsou
      Hc8WM/mFu6TJ4yLU7SA6lcYTtFLIa0hK81+pM+jC012/3M9HESQJ2aygWBRMTjtSMYfJ58UV
      clIsVkBScIV9OHx28pEkxaLGPXpf1YS7y2/IU0AyK8hmBUmpqtrnshXcAQeSCOlEjnIihaoL
      iOg4wj5cIU9Dw7cHchIsCAKuDm/TpXiCYsLfH8BtK5LKxjCZdASzHXenj3wsRXhXD4mxOcx2
      hUwkg6c/jGJRKBRr78e5HO5OH96eQNMRFdlsopjOYnJYkcwmEmPzzN2Mo4gauVSB1GyS2Fi1
      paHN7yY9PkWx2PgJFasJR9CNpyfA3LWpxg0HzE47uXgGk92G2SYTG53GHvQwd3WSSlnDHvAw
      f3WCclEFQSRuEhr6qh5IB4CqimCzDqCXS0QvXycKWLxOcokUqpYnPR1BR2f4zfPVa1TXIZEz
      LAXYNxDCFfZi9zqbWlUt5/Ikc0tXI8qZHItTBG8nDOYMiFz5+0OYrCbCO3qa7ruUi9yJ5+dv
      /Zmdv/NadtH76BqVBu85D+QQCKhZUGE1bqcm52MpVBW49T/6or8NxGQz4+8PIUoiHTt6DD32
      WtN5S77IHfZi9zlbbE1tPLAO4On2L6skuNHp2N6NpFQfzH0HtrTYmtox2cyEt1cdVpSl6hDu
      PuCBdQBJkesShtso9C6y2dXprUvup5X07N+80LoRILyrvtaJreKBdQCA/kNbG0orbhWebj/+
      TXe6xAmCwNYndteVjNYKpFsK9Itli8I7enCFvS20qjYeaAeweez0Hrh/ngKDT+y+S5UlsClM
      eIPPBQYf233XCrAkS+z89IEWWVQ7D7QDAGz/1EPIG0i5cSX8AyE6dy4/bNj7uUcw2Yxb3TYS
      Z8jD4BO7lxWt69jWTecGHgqFtnU9+A5gslvY9emHW23GPRFliT2ffWRFTS6bx8Hezx3ecEMh
      SZE48IVPIJuWv8EIgsBDv3gEi9uY/CAjMTutPPT5Iw++AwiCQP+hrXRs37iTyW2f2otnldXT
      7oc21S0Cvdbs/oWDeFfpDm1xWnn4S4/dU31yvREkkQNfOFqtJGu1MeuBKIns++VPYPU0n2Bm
      NJ27+9j6+J5VtxMEgT2fOUTXnvr0BNaKbU/tZeDI9pq2DW4Os+8Xj8A9tH3XDUFgzwuHFtaJ
      HsiCmJXYKCINt3F3+Tj6Xz1XV/aqWq5w+m/faV2/UwG2PfUQO57ehyAKVEplSrmqwk0pX0Qr
      qwiigNlhxeKyYbKZkU0yuq5z88RVzr94oiXKNlAtMtr56YeXRKw+Vg4A1XYpJ77zRsuLNlxh
      L5/45rOYbGZysTTRsXlSM3FysTTFTAG1XEHXdSSlKpNk8zhwdXrx9gaxex1c+tlpRt4bWleb
      BVFk16cPENrWzczlceZvTJOeTVLKFZa9qAVRwGS34Ay5CW3pIryrl8REhLM/en/dtdlESeSh
      X3qUvoe3LJmwf+wcACAxGeH9b7/RspbpgU0dbHlsN/PXp5m5PF53AbzFZSO8o4dKqcL0xbF1
      uZhMNjMdO3pIzyZITEYbPo6n24+n28/s1cl76vcaid3v5OEvPYav7+75ysfSAQDyiSynfnCM
      6M31bZ5r9dixuGwkxiOG5BGt1kTKCARJRBAEQ1XhZbOCrmmoFXXNaogFSaT/0FZ2PLNvxRqF
      j60DAKgVletvX+LqG+c2fAvyWpBNMpWyakhXZlESsbhsFFK5NW1zKFsULE4r2WjasLmBIIqE
      tnax45l9uLt8y65RLGz7cXaA26Tnk1z5+RliY/OGD4vMTiul7PJjZKMRJJHApg5kk0IxkycT
      Sa2okL4cVo8dm8exUIwzdmp4XeZKkkmm78AWKuUKmUiK1Ey87q7YslnB2eHB1eFh4JFtuDvv
      feHfpu0Ai6iUKsxcHufmiavEx+cbvvMpFhOh7d34eoPcOH65iS51jWFx2Tj81Sdxd/nIRtMk
      JqNk5pMUswVKuSJaRUUyyZisZixOK84OD54eP1aXHbVc4f1vv95Ua8lGCWwJc/jXnkRSJBKT
      UeITUZLTMXLxDMVMfuH3EGUJk9WM3e/AEXDj6w/i7Q4gmeSaLvrFtB1gGXRdJxfPEBmZIXpj
      lvhEhHwyh6aqd93JBUlEVmRsPge+viDBwS58fUHyySwnvv06+WRrJtqK1cQjv/EpAptqV3Uv
      F0qc+M4bLW0s7B/o4NFvPIP8kc4euq7fEbcWhbov9JVoO0CNlPMlitkC5UJpYb6gmBVkq4LF
      YV3I4Ydqf/x3/uxn5JPrE+VYCdmicPS/fK6m3HxN1Tj1/WNMXWi9nlp4Zy+Hv/rkiqkhRtJ2
      AIMp5Yq882c/3TCqjmanlSd+6wVsnpWLg3Rd5+rr57jy6sbRU9v+zD52PL1vTY5dLpbJxzPk
      4pkHtya4FeiaxoWXPtgwFz9Ue/af+bvjHPn600jK8vk4iYkIQ6+fW2fL7s21N88T3BzGP1D7
      EG4lNFUjE0kxfXGUyMgsyek45Xw1ONB2AAOZvjTO+NkbrTbjLuavTzPy/hCDj+266z21XOHc
      P7QuPWEltIrGuX84wZP/3WcbHgqp5QrjH95g9NQwicnIsusNbQcwiEqpzIWXT27YxrBXXz9L
      997+uzrOTZ672dTK7lqSmokz/uF1+g9trWs/raIyenKYq2+eXzWs/bHIBl0PRt6/um5L+41Q
      LpS5+sb5JavParnC8NsXW2jV6lw7drHmVA9d10lMRTn2Jz/h3D+8X9OaTtsBDKBSqjByfGOr
      uQOMnb5OaZEa/dy1KdJzBnSyXkOykRSzVydX3U7XdW68e5m3/+QndT3R2g5gANOXxloW768H
      raIycuLqwv9jp6+30JraubnI5uWoFMuc/sHbXPjxybpTWtoO0CS6rjN5dqTVZtTM1PlRNFWl
      XCgxP9xc+8L1IjY6T36F4cztxbuJBn+DtgM0STFTaFoWdD1JzydIz1WlTO+XBEC1XCE+frfC
      TaVY5uT33mpKEL3tAE2SmIxSqTNxq6XoVUHr2GgjfVMlOnb2ENzaibKkC7YJd9fShTaxUYnM
      FYiNLk1b13Wdcy+eaLoJbzsM2iTR0frv/o7uIHarglouEhltPATp6gmRn52nXA2989kAABS9
      SURBVK4v9pqcjjWY5SmjlXMkIzqeTiea4kAWVeauJTDZFBydAWx2E8Vkiux8EUeHk9R8Dk/I
      jMnjRZQE9FKZSrFAdKy+RsKp2TuysbquM/LeEOMGzGHaDtAkmfn6VRFlq0x0eAr7pi4cHjuu
      ngBqsUihJGA1VXUJNMkM6FjsClpFZebKNL6BIKKuUqwI2J1Witk8qsuJ0ywQm6o9mpOYijWc
      TObsDCBby2SmE4R3O8llwemphn9tThNzV+cIbvFQmK9UZZ6iRSxOM2qlTCJRQU7HsHaG6j7v
      4qq59HySSz873ZD9H6U9BGqSXBPtyyslFXuHD1nUMDttSLJA9MY0miCBVmH++kw1ZyVTxmS3
      IAnVHkGyWWH20ggVZDq3h0lM1xfKzMXTFDONibiqt4rgzVaRbLxAfi5KLlMdAgqyCW9fcEEl
      RzSZ8PUFMCKn7bb0raZqnPvRe3XXC6xE+wnQJMVFcfWa0UUCg50IksD8WITQ5iDlVJqKKqDr
      LJqc6mgVFU0QEE0KolidEFYKRTQV1EKRifMxApuCzN2ofUyvVTRKDTXULzJ5ZgJ0nUqpgjCV
      QJSqlXWRGwWsXg2T3U4pW6BIgbmhcURRIH4rj1+/1VI+20C6tVbR0FSN6Ytjhpaxth2gCXRd
      byiSkri+dGFn6uLYkv8XT/hiE3fGytmP/O7pqepFX0iv3xpEpXhHXkNX1apmAqBrOqVcAdQy
      uUTu1vvawvuLaTTvSFO1qvCGgbQdoAmMKsp4UKjki1QaG1mtiiSLzF2bNDzTtu0ATSIp8pK7
      4v2AKFfF80qNDN8+giArhAY7EDSVuZEIwc0doKtkYnnsHhtaqUCkzojPcpjsFsZODTd9nI/S
      ngQ3idnZvCSovcNH70N3uigrLhfdu3sJbwsj2230HdyKySSgOO1VzYMmQ+yyWcYV9qy+YQ2Y
      fB5KkQi5koAr5IZSHl1SKKdSJGaSmBzGSNbKJpn568aXarYdoEnsBsgwZWdjFHJ3niKesIuZ
      K+PokoKazRGfTSEIUE5nSc5nmm6xaXXZ8XYbI2FUjEQR3T6cfgeiUFXWFMXqQpjdZzespUo+
      mTO0L9Ft2g7QJK6wMcroi9E0FtTd16K8wBX24u42ym4BQQA1kyGTLCKaZERJxBZwI5skwwpt
      1qo9S3sO0CTe3ubvpM7OABaXDVfQhT3oZvb6PKEtPZTTGUxOB06/HdUSJDmfx+61oYh+5kca
      X0H2b+ogsCmMIInozd6hNZXIoqS6qQvGt4ARZRFBEBtqAWn1uXF4bWRmo+QzdztR2wGaxNcb
      RLGZKdfRgOqjpKcjpKcjIAhkE1m0ssrMlfGF96fO3lkFnTzT3AUmiAL+/hBmuwV/X5BIC/r/
      1Ivd72p4wdHmsxEdniG8pxemUzj9NpJjsyhuNxar2B4CNYtiNRHcEl59w1pocF2hHjzd/gUN
      3/7D29b0XEYR3NLZ8PcimswEB8Oo+QK6pqGLCt4uL74+P7GxaNsBjKB33/0jxNe7fzPCrflF
      eGfvhhQNWYzVbcffX3/u0G20UpH54Wlmr8/h6fSSjVfzlvLxdHWuZZShH2dC27rvC2V0xWKi
      +6FNC//LJpnBx3a30KLV2Xx0B7rW+DwlMT7P7b0jI7NQzBOZiN+qL9DbDmAEoiSy9cnVZY5a
      zaZHty8RswboPzSIM+RukUX3xuZzsunRHU01u1aLdybOlXyBXCJLpaRSufV62wEMonf/Ztyd
      G1cY2uq2seWTu+5K35AUmb2ffWTDKVAKosDezx5GkqWFIdta0HYAgxBliT2fOYywDv0sG2HX
      8w+vqDUc2BJmy9G7m2a1kv7D2xaUPQ3VSBYEfIO9WCzV32lj/lr3KYHNYQY/ubEuJICefZvo
      3rtpxfcFQWDnc/sJGBXNahL/pg72vHBw4Wn1URX6ZhAkiUKujMVSPXbbAQxm+zP7CA52ttqM
      BVxhLw/94pFVhxGSInPoVx/HvYpe8VrjDLk5/NUnl3TbNtstyOblxbjrRa9UKJfuhFTbDmAw
      kixx6CtP4Aq3fj5gdds5/OtPolhMq28MmB1WPvGNZ3C1aC7j7vLx6DeeuUvPS7GasPuaz7kC
      kKwWAn0BPP0dWDyudnv0tSKfzPL+X71Ocrr5VOBGsHrsfOKbz+IM1h/hKeWKnP6bt5kdWr0j
      m1GEtnbx8JcfW1HM7tzfv8/I+8bKwlp9zrYDrCWlXJGTf/0W88ON961pBHenj0NffQKH39Xw
      MdSKyrW3LnDtzfNolbUTyRNlicHHd7P9qb2I98jznrkywft/9Zrh5287wBqjVlSGXj3L8DuX
      mk88Ww0BevZt5qHPPXJXvL8RdF0nMRnl4sun1qT5l68vyO7PHMLXe7d+70dRyxV++gd/Y3hW
      aNsB1onIyCznXzxBaia++sYNYPc72fX8w3Tu6jO8VFPXdeauTTF87KIh+mG+viBbn9xLx/bu
      umw9/bfvGNILaDFtB1hH1HKF8TM3GH77EtlI/f2ElsPqtjFwZDubH91hWKRkJXRNJzkTY/Ls
      CDNDk+Ri6ZoLXgRRxO5z4Or0YrJZqBTLqOUKoiSi3FarDLpxhtzYfE6kZYZD8YkIx/74ZUME
      xhfsajvA+lMpVYiOzDB6cpi54am6e9xIJpnAQAc9+zcT3tGz5hf+cmiaRj6ZIzUTJz0bJ5/M
      UcoW0DQdQRBQLAqFTIHUdIxCplC7eLdQrVgLbAnTtbuP0NbuBYUYXdc5/pc/N3RO1XaAFlMu
      lIiPR4iOzpGeTZCLZyjliqjlCrquk9XiZIUYOVOUvCOGHBLx93dgcdiwKS48ljBB2wBhxxac
      ZmPKHJtB13Rmhya48tpZklPNR8BsPgf9B7ey6Ug1jyk2Nsfbf/pT41Tl2w6wscgWE1yYfY1T
      Uy8yFH2XuewNVCog3OtnElBEE53ObewKPsm+jk+zI/A4dpMxhe+1cHvCfOGlD4iNNdJ4996Y
      7BZ2PruP3ocHOf/iCUY/uGbIcdsOsAHQdJWR+Ie8cuOPOTn196SKzV9ALnOII91f4IWt/5hu
      53YEYe3WPNWyypVXz3Dj+OU1DZkC+PpD7Hr+YU59/5ghklRtB2gxVyJv8zcX/wXn536OvgYl
      8AICD3d+ji/t+uds8R0y/Pi5RJaT33tz2f79a4ViMdG9d4CxD4ebdri2A7SIWH6K75z7p7wz
      /j00fe2FKiRB4amBb/LVvf8al3n1uHstJKZifPCf3ljSuXm9EEQBq9ve9LnbDrDOaLrGB5M/
      5C/O/GNi+fVLNbiN39rLbx78Iw6EP9PUekFyOs7xv/x5w12mjUIQhKbCom0HWEc0XeWvzv4u
      P77279BZ41XheyAJMr+y8/f48q7fb8gJ8oksx/70JxtGFtbssFDMNNbmse0A60S+nOb/OfF1
      Tk79qNWmLPB439f41qE/wSTV3r6wUizz7l+8sq5j/tUQZYmuPf1MXxxtq0RuRPLlNP/u/V/f
      UBc/wLGxb/OHJ75JSa1tGKPrOldeO7uhLn6oyr/Gx+c59JUncATqSwBsO8Aao+kq//79X+f0
      9IutNmVZjk98nz/84Js1bZuYjDJy/MraGtQg2Wia+RszPP6tF9j8iR01D+3aDrCGaLrKfzj9
      O5zaoBf/bY6Pf5/vnv+9e04mNVXjwo9PGtbsdi0YeX+IfDLLns8e5qnf+TzdDw2sWqPddoA1
      5Njot3nlxv/XajNq4kdD/ycnp/5+xffnrk3eJVW60dBVjaHXqwoyrg4PB3/1cZ76R59j8PHd
      K9YVtyfBa8RcdoT/9eePkC5trPHyvfBauviDZ0/itS6tadZ1nXf/wyuGpEKvNYIo8PQ/+aW7
      5gJquUJ8Ikrk+jTR0TlSswlK2UK7Oe5aoOsaf3nmv7+vLn6AeGGKb5/7XX7nyLeXvJ6aiRO9
      D5roQjUZb/TkNXb/wsElr0uKTGBTB4FNHQuvlXLF9hBoLTgz8xNOTW3scf9KvDP+Pa5Gjy95
      bfL8TUNz8NeayXM3a2qlbrKZ2w5gNKpW4W8u/YuWLnQ1g6arfP/i7y+kZ+i6zsyViRZbVR/5
      ZJZ0jQLmbQcwmHOzr3At9n6rzWiKc7OvMBz7AIBCKmdY9dp6ErleW9FM2wEMRNd1Xh7+9602
      wxB+OvyHACSnYk2FPj39YUKDXfh7l/YaWjwWXxZJIdDbeJOuaI0Rq/Yk2ECi+XEuzx9rtRmG
      cHLqRyQLc6Tnkk0dR1IE5oen6NjZi3eTBZNZphCJIUgiktWKv8eLVioiWOygqWj5LKpkwWRR
      kJoQHc7M12Z3+wlgIKenX6KobowEsWbJV9KcmXmZXLK5zyOZLQQHO8nNx1EUgdkr41gC1Uo1
      k92CANi8TlDLzF+bRrSYURSRueuzVCqNT7yL2UJNE+G2AxjI6emXWm2CoZyafrFpMe1yJsv8
      8DSpSIZyBTp29FKIJlDLKpJZAXTUcmUhiU0tV9AQCW4OITRRIKRVNMo1CJi3h0AGUVYLXIu+
      12ozDGUo8i6fKP+3TR0jvmgsHr8xteid6pPlo+UssdHG1S8Xo+taTbrC7SeAQUykLpEprU3T
      q1aRLM4ynxtttRkNItSUENd2AIOYTA8ZEvs/2Pl5APZ3fh6zaMUqe7DKdmRBxCxVBe3cll7c
      Ji+KZEUAzJIdRXISsvUhCTJmyYIgKJjE5voFabrKbGG42Y/UEgRRuGev0du0h0AGMZMxpk2H
      JFR/NFGQ6PI/y2azxuXMPGLxOmHv40xkp/FLJVzWg0RLWUYjr7Av/BxDsTM4rVsIWwNYzF2M
      5ZJIxfNM5hNN2RNnihDNiX6IFjOdezYTv3iZXB5AoGNXH5IkEL02gasvjKBViI1F8fSHMFtN
      RIZGKRYbv6FIilxTW/j2E8Ag4nmDupXdemyLgkBFL/Dh9Evk1duTOQGnyc1o8izZyuLojEC/
      Zz8iYFGspCoV+q1Oppq8+AHK9uYL3rVCkehkgtsaHYJiglKe2ZEo3p4QTr8VQRRBq5CLZ0Go
      vZHcSlhdtoWOcvei7QAGkSs3Fy+/zVD8Eg+HXyCRuUQqP0ZBg3R+jKDnCAolRuNn2Bp8nk5b
      J/O5CXaGnqNQmiGWn8Eiy0RyMwwnR7AIGUOarEhroZWhayAICJKIplbIRZJEZ7J4O13kYymy
      6TIWe3PDt1oFC9tDIINQ9dVDbrWQzA1xOvcRIYhKlA+nfwyA1dSNpmvcTHxIPHuZePbywmbV
      jB2BbcFnOT37piH22EJ2JEVqSsFettnwBG2IzhByUaIcjVCqiAQ6Hcxfm8LVG8bf5SAxGSc0
      GAZBJ5Zp7vv01tByHdoOcN+RL01ydvZe7VR0rs6/Ytj5rHY7nm4/0ZuNF8NUcjlmzlXbmksm
      GbVUIZu5M2SM37zz92w617ixtxBEgcDm2gT/2kMgg7ApayM27TB9NB9GxGsJAaBIbsxiddIs
      CGbcZuMF7iyyg44dvYYdr95O2I3g7vLVrCnWdgCDcJlDhh/TbRvkkz2/zOJgXqfnCE/0fB5E
      J/u6vkyfrXrRDwae5FD4OcNtcJmDdO/tRzLdP4OF7r0D1Ul1DbQdwCBC9gHDj5nMDTOeGb/z
      guCgy2JhKhcFLc2l6AdogNk0gEWbIV0pGm5DwNaPzeMgvL3H8GOvBbJJpu/hwZq3bzuAQfS4
      dgPGShMtxqL4CTm3IwkKA579eEx3HvGdzgFEuYN+9x6sTS5+LUZAoNu1E4DBJ3avqjW8Eeh/
      ZFtd+mj3z3Ntg9Pj2oUimilrzSWPLcZv34lFMrHVtx+zqZsLMy8xl4LrictkNBO7XV2IeoAr
      kbe4qZaZSF0hrxkTjQIwyw66nTuAqvJkz77NjH9orEaXkZhsZgYf21VXu8e2AxiEw+Sl172b
      G/FThh0zmr1MdCHMeebO6/nqsOjszMtLt8+PYyTb/I+iSGag2oR2x7P7mb48RqVgnJMZyfZn
      9mFxLt/+ZCXaQyAD2dfx6VabYCj7Op5f8r/NY2fv5x5pkTX3JrS1i4HD2+rer+0ABnK4+5cR
      HpCvVBZNHOz63F2v9+7bTP/hrS2waGUsLhv7f+UTNaU+fJQH49faIGz2HqTf81CrzTCErb4j
      hB13X+iCKLDnhUOr1/SuE7JZ4fBXn8Tqtje0f9sBDEQUJJ7b/FutNsMQnt38LcQVdMVks8Ij
      X/sUvn7j1z7q4fbF7+trXPGm7QAGc7T3K7jNG+Pu2Cidjm0c6fniPbdRLCYe/S+eJrS1a52s
      WorJbjHk/G0HMBi7ycPnt/9PrTajKX5pxz/FJFlW3U6xmHjkN55iyyd3ruUSyF24u3w89pvP
      4x9o/kbTbo67BpTVAr/7ygGm0huzl/692OR5mP/jmfeRxPoi5NOXxjj/0gdrKpskyiJbju5i
      26ceQjYoNaPtAGvE2ZlX+IO3P2tYmvR6oIgW/vmTr7I9cLSh/cuFEsPHLnLj+BUqNXRkqBlB
      ILC5gz0vHMIV9jYl7nfXodsOsDbous6ff/jb/Oz6/9tqU2rmCzv/Gb+25182fZx8Msvw25cY
      Oz3c1KKZpEiEd/Yy8Mh2/P3BmhPc6qHtAGtIsZLlX7713F3dljciD3U8x//yyb9HqWHsXyuV
      UpnZoUlmhyaIjc2TjaZX3cfqtuHr7yA42El4ezdmR+0Cfo3QdoA1JpIb439/4ynmsiOtNmVF
      up07+P2n3sBjWbvolaZplHNFMtE0hVSOUr6IruoIooBiUbC67dh8Tsx2C4JYW0sTI2g7wDow
      lrzAv3rrORKFjaewErJv4p898Qphx5ZWm9IS2mHQdaDPvYffe/ynBG0DrTZlCd3OHfxvj//k
      Y3vxQ/sJsK5EcmP8X+9+wdCM0UbZ4X+M//HoD/BYaqudfVBpO8A6ky+n+atz/zOvjfz5ggrL
      eiIJMs8P/jZf3fOvMMuN5c88SLQdoAXousap6Rf5s9P/iFh+/eSHgrZ+/puH/4j94V9Yt0nm
      RqftAC0kX07x0rV/y4tX/2/DGmsth8sc5DNb/wmf3fo/YJbrKxh50Gk7wAYgUZjh1Rt/xqsj
      f0okNw4G9HQTEAjaB3h+y2/z5MDXcZkbz5h8kGk7wAaipOa5MPc6x8e/z/m5VxsYHgn4rT0c
      6vo8R3q+yHb/UUMXth5E/n/sfgZvTnIxAQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='CountryWithMostTournaments' width='192'>
      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
      K/8DbNX85BqJ+9oAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='FootBallDashboard' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='TournamentWithMostGoals' width='192'>
      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
      RJMYiXIsOwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='TrendOfFootBall' width='192'>
      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
      Cz0FMwAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
